!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	https://github.com/fishman/ctags	/official site/
!_TAG_PROGRAM_VERSION	Development	//
BASE	mod.sv	/^  type BASE = extended_base   ,$/;"	c	class:myclass
PARAM1	mod.sv	/^parameter PARAM1 = 1;$/;"	c	module:mod
PARAM2	mod.sv	/^parameter PARAM2 = 2;$/;"	c	module:mod
a	mod.sv	/^    function method(input a, input b);$/;"	p	function:extended_base.method
a	mod.sv	/^    function method(input a, input b);$/;"	p	function:myclass.method
a	mod.sv	/^    input a,$/;"	p	function:mod.test
a	mod.sv	/^    task atask(input a, output x);$/;"	p	task:myclass.atask
a	mod.sv	/^    task btask(input a, output x);$/;"	p	task:extended_base.btask
atask	mod.sv	/^    task atask(input a, output x);$/;"	t	class:myclass
b	mod.sv	/^    function method(input a, input b);$/;"	p	function:extended_base.method
b	mod.sv	/^    function method(input a, input b);$/;"	p	function:myclass.method
b	mod.sv	/^    input b,$/;"	p	function:mod.test
base	mod.sv	/^class base;$/;"	C
base.ctask	mod.sv	/^    task ctask(input x, output z);$/;"	t	class:base
base.ctask.x	mod.sv	/^    task ctask(input x, output z);$/;"	p	task:base.ctask
base.ctask.z	mod.sv	/^    task ctask(input x, output z);$/;"	p	task:base.ctask
base.value_base	mod.sv	/^    logic value_base;$/;"	r	class:base
btask	mod.sv	/^    task btask(input a, output x);$/;"	t	class:extended_base
ctask	mod.sv	/^    task ctask(input x, output z);$/;"	t	class:base
extended_base	mod.sv	/^class extended_base extends base;$/;"	C	inherits:base
extended_base.btask	mod.sv	/^    task btask(input a, output x);$/;"	t	class:extended_base
extended_base.btask.a	mod.sv	/^    task btask(input a, output x);$/;"	p	task:extended_base.btask
extended_base.btask.x	mod.sv	/^    task btask(input a, output x);$/;"	p	task:extended_base.btask
extended_base.method	mod.sv	/^    function method(input a, input b);$/;"	f	class:extended_base
extended_base.method.a	mod.sv	/^    function method(input a, input b);$/;"	p	function:extended_base.method
extended_base.method.b	mod.sv	/^    function method(input a, input b);$/;"	p	function:extended_base.method
extended_base.value_extended_base	mod.sv	/^    logic value_extended_base;$/;"	r	class:extended_base
in1	mod.sv	/^    input  wire     [7:0] in1,$/;"	p	module:mod
in2	mod.sv	/^    input  wire           in2,$/;"	p	module:mod
method	mod.sv	/^    function method(input a, input b);$/;"	f	class:extended_base
method	mod.sv	/^    function method(input a, input b);$/;"	f	class:myclass
mod	mod.sv	/^module mod($/;"	m
mod.PARAM1	mod.sv	/^parameter PARAM1 = 1;$/;"	c	module:mod
mod.PARAM2	mod.sv	/^parameter PARAM2 = 2;$/;"	c	module:mod
mod.in1	mod.sv	/^    input  wire     [7:0] in1,$/;"	p	module:mod
mod.in2	mod.sv	/^    input  wire           in2,$/;"	p	module:mod
mod.out	mod.sv	/^    output reg            out$/;"	p	module:mod
mod.test	mod.sv	/^function test($/;"	f	module:mod
mod.test.a	mod.sv	/^    input a,$/;"	p	function:mod.test
mod.test.b	mod.sv	/^    input b,$/;"	p	function:mod.test
mod.test.z	mod.sv	/^    output z$/;"	p	function:mod.test
myclass	mod.sv	/^class myclass #($/;"	C	inherits:BASE
myclass.BASE	mod.sv	/^  type BASE = extended_base   ,$/;"	c	class:myclass
myclass.atask	mod.sv	/^    task atask(input a, output x);$/;"	t	class:myclass
myclass.atask.a	mod.sv	/^    task atask(input a, output x);$/;"	p	task:myclass.atask
myclass.atask.x	mod.sv	/^    task atask(input a, output x);$/;"	p	task:myclass.atask
myclass.method	mod.sv	/^    function method(input a, input b);$/;"	f	class:myclass
myclass.method.a	mod.sv	/^    function method(input a, input b);$/;"	p	function:myclass.method
myclass.method.b	mod.sv	/^    function method(input a, input b);$/;"	p	function:myclass.method
myclass.rl_variable	mod.sv	/^    real rl_variable = 1.0;$/;"	r	class:myclass
myclass.size	mod.sv	/^  int size = 1$/;"	c	class:myclass
myclass.value_myclass	mod.sv	/^    logic value_myclass;$/;"	r	class:myclass
out	mod.sv	/^    output reg            out$/;"	p	module:mod
rl_variable	mod.sv	/^    real rl_variable = 1.0;$/;"	r	class:myclass
size	mod.sv	/^  int size = 1$/;"	c	class:myclass
test	mod.sv	/^function test($/;"	f	module:mod
value_base	mod.sv	/^    logic value_base;$/;"	r	class:base
value_extended_base	mod.sv	/^    logic value_extended_base;$/;"	r	class:extended_base
value_myclass	mod.sv	/^    logic value_myclass;$/;"	r	class:myclass
x	mod.sv	/^    task atask(input a, output x);$/;"	p	task:myclass.atask
x	mod.sv	/^    task btask(input a, output x);$/;"	p	task:extended_base.btask
x	mod.sv	/^    task ctask(input x, output z);$/;"	p	task:base.ctask
z	mod.sv	/^    output z$/;"	p	function:mod.test
z	mod.sv	/^    task ctask(input x, output z);$/;"	p	task:base.ctask
